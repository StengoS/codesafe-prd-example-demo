#!/opt/pwn.college/python

import unittest
import subprocess 
import unsafe_code

from unittest.mock import patch, MagicMock

class TestListFiles(unittest.TestCase):
    def test_list_files(self):
        result = unsafe_code.list_files('./some/directory')
        self.assertEqual(result, ["file1.txt", "file2.txt"])

    @patch('subprocess.check_output', side_effect=subprocess.CalledProcessError(1, 'ls'))
    def test_invalid_directory(self, mock_check_output):
        with self.assertRaises(ValueError):
            unsafe_code.list_files('/invalid/directory')

    def test_security_no_shell_execution(self):
        with self.assertRaises(ValueError):
            unsafe_code.list_files("; whoami ")  # Should raise an error, not execute potentially malicious code


# Taken from https://stackoverflow.com/questions/13550039/how-to-use-python-unit-tests-in-self-contained-program
def run_tests(test_case):
    case = unittest.TestLoader().loadTestsFromTestCase(test_case)
    result = unittest.TestResult()
    case(result)
    if result.wasSuccessful():
        return True
    else:
        print("Some tests failed!")
        for test, err in result.failures + result.errors:
            print(test)
            print(err)
        return False


if run_tests(TestListFiles):
    print("All tests pass!")
    with open("/flag") as f:
        print(f.read())
else:
    print("Some tests fail. Please review and try again.")

